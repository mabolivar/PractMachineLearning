exp(glm2$coefficients)
a <- exp(glm2$coefficients)[1]
b <- exp((glm2$coefficients[2]))
a/b
x <- -5:5
y <- c(5.12, 3.93, 2.67, 1.87, 0.52, 0.08, 0.93, 2.05, 2.54, 3.87, 4.97)
knots<-0;
splineTerms<-sapply(knots,function(knot)(x>knot)*(x-knot))
xMat<-cbind(1,x,splineTerms)
yhat<-predict(lm(y~xMat-1))
plot(x,y,frame=FALSE,pch=21,bg="lightblue",cex=2)
lines(x,yhat,col="red",lwd=2)
summary(lm(y~xMat-1))
yhat<-predict(lm(y~x+splineTerms))
plot(x,y,frame=FALSE,pch=21,bg="lightblue",cex=2)
lines(x,yhat,col="red",lwd=2)
summary(lm(y~xMat-1))
summary(lm(y~x+splineTerm))
summary(lm(y~x+splineTerms))
s <- (lm(y~x+splineTerms))
-0.18258 + 2.03723
-1.02416 + 2.03723
-0.18258 -1.02416
download.file("https://dl.dropboxusercontent.com/u/7710864/data/gaData.rda",destfile="./data/gaData.rda"
load("./data/gaData.rda")
gaData$julian<-julian(gaData$date)
download.file("https://dl.dropboxusercontent.com/u/7710864/data/gaData.rda",destfile="./data/gaData.rda"
load("./data/gaData.rda")
download.file("https://dl.dropboxusercontent.com/u/7710864/data/gaData.rda",destfile="./data/gaData.rda"
load(".//gaData.rda")
t <- 1
glm3 <- glm(count ~ spray + offset(t), family="poisson")
glm3 <- glm(count ~ spray, offset(t), family="poisson")
summary(glm3)
glm3 <- glm(count ~ spray, offset(t), family="poisson")
summary(glm3)
t <- log(1)
glm3 <- glm(count ~ spray, offset(t), family="poisson")
summary(glm3)
t2 <- log(10) + t
glm3 <- glm(count ~ spray, offset(t2), family="poisson")
summary(glm3)
install.packages("swirl")
library(swirl)
swirl()
install.packages("AppliedPredictiveModeling")
install.packages("caret")
library(AppliedPredictiveModeling)
library(caret)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
diagnosis
predictors
library(AppliedPredictiveModeling)
library(caret)
data(AlzheimerDisease)
testIndex = createDataPartition(diagnosis, p = 0.50,list=FALSE)
training = adData[-testIndex,]
testing = adData[testIndex,]
adData = data.frame(diagnosis,predictors)
testIndex = createDataPartition(diagnosis, p = 0.50,list=FALSE)
training = adData[-testIndex,]
testing = adData[testIndex,]
library(AppliedPredictiveModeling)
data(concrete)
library(caret)
set.seed(1000)
inTrain = createDataPartition(mixtures$CompressiveStrength, p = 3/4)[[1]]
training = mixtures[ inTrain,]
testing = mixtures[-inTrain,]
hist(SuperPlasticizer)
hist(concrete$SuperPlasticizer)
hist(concrete$Superplasticizer)
hist(log(concrete$Superplasticizer))
par(mfrow=c(1,2))
hist(concrete$Superplasticizer)
hist(log(concrete$Superplasticizer))
hist(concrete$Superplasticizer)
hist(log(concrete$Superplasticizer+1))
set.seed(3433)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
names(training)
grep("IL",names(trainig))
grep("IL",names(training))
names(training)[idx]
idx <- grep("IL",names(training))
names(training)[idx]
idx <- grep("[IL]",names(training))
names(training)[idx]
idx <- grep("IL",names(training))
names(training)[idx]
idx <- grep("^IL",names(training))
names(training)[idx]
tr <- training[,idx]
PC <- preProcess(tr,method="pca")
summary(PC)
sp <- predict(PC,tr)
str(pc)
str(sp)
prc <- princomp(tr,cor = T)
prc$sdev
prc$sdev^2/sum(prc$sdev^2)
)
cumsum(prc$sdev^2/sum(prc$sdev^2))
set.seed(3433)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
idx <- grep("^IL",names(training))
names(training)[idx]
tr <- training[,idx]
PC <- preProcess(tr,method="pca")
sp <- predict(PC,tr)
str(sp)
stdv(sp)
sd(sp)
sd
sd(sp)
sd(sp[1])
sd(sp[,1])
sd(sp[,2])
nonPC <- train(training$diagnosis ~ tr,method = "glm")
t
tr
nonPC <- train(training$diagnosis ~ tr,method = "glm")
nonPC <- train(training$diagnosis ~ .,method = "glm", data=tr)
install.packages("e1071")
nonPC <- train(training$diagnosis ~ .,method = "glm", data=tr)
cumsum(prc$sdev^2/sum(prc$sdev^2))
sp[,1:7]
PC <- train(training$diagnosis ~ .,method = "glm", data=sp[,1:7])
confusionMatrix(testing$diagnosis,predict(nonPC,testing[,idx]))
sp_test <- predict(PC,testing[,idx])
testing[,idx]
PC
PC <- preProcess(tr,method="pca")
PCmodel <- train(training$diagnosis ~ .,method = "glm", data=sp[,1:7])
PC <- preProcess(tr,method="pca")
sp_test <- predict(PC,testing[,idx])
sp_test
confusionMatrix(testing$diagnosis,predict(PCmodel,sp_test))
mapply(sd,sp_test)
mapply(sd,sp)
plot(density(rnorm(seq(-2,2))))
plot(density(rnorm(seq(-1,1))))
plot(density(rnorm(seq(-1,1))))
plot(density(rnorm(seq(-1,1))))
plot(density(rnorm(seq(-1,1))))
plot(density(rnorm(seq(-1,1))))
plot(density(rnorm(seq(-1,1))))
plot(density(rnorm(seq(-1,1))))
plot(density(rnorm(100,0,1)))
plot(density(rnorm(100,0,1)))
plot(density(rnorm(100,0,1)))
plot(density(rnorm(100,0,1)))
plot(density(rnorm(1000,0,1)))
plot(density(rnorm(1000,0,1)))
plot(density(rnorm(1000,0,1)))
plot(density(rnorm(1000,0,1)))
plot(density(rnorm(10000,0,1)))
plot(density(rnorm(10000,0,1)))
plot(density(rnorm(10000,0,1)))
plot(density(rnorm(10000,0,1)))
plot(density(rnorm(1000000,0,1)))
plot(density(rnorm(1000000,0,1)))
plot(density(rnorm(1000000,0,1)))
plot(density(rnorm(1000000,0,1)))
plot(density(rnorm(1000000,0,1)))
plot(density(rnorm(1000000,0,1)))
plot(density(rexp(1000000,1)))
plot(density(rexp(1000000,1)))
plot(density(rexp(1000000,1)))
plot(density(rexp(1000000,1)))
plot(density(rexp(1000000,1)))
plot(density(rexp(1000000,1)))
plot(density(rexp(1000000,1)))
plot(density(rexp(1000000,1)))
plot(density(rexp(1000000,3)))
plot(density(rexp(1000000,3)))
plot(density(rexp(1000000,3)))
plot(density(rexp(1000000,3)))
plot(density(rexp(1000000,3)))
plot(density(rexp(1000000,3)))
plot(density(rexp(1000000,3)))
plot(density(rexp(1000000,3)))
plot(density(rexp(1000000,1)))
plot(density(rexp(1000000,3)))
plot(density(rexp(1000000,1)))
plot(density(rexp(1000000,3)))
plot(density(rexp(1000000,1)))
plot(density(rexp(1000000,3)))
plot(density(rexp(1000000,1)))
plot(density(rexp(1000000,3)))
install.packages("triangle")
library(tringle)
library(triangle)
triangle
plot(density(rtriangle(1000000,3,6)))
plot(density(rtriangle(1000000,3,6)))
plot(density(rtriangle(1000000,3,6)),lwd=2)
plot(density(rtriangle(1000000,3,6)),lwd=2)
plot(density(rtriangle(1000000,3,6)),lwd=2)
plot(density(rtriangle(1000000,3,6)),lwd=2)
plot(density(rtriangle(10000000,3,6)),lwd=2)
qplot(density(rtriangle(10000000,3,6)),lwd=2)
library(ggplot2)
qplot(density(rtriangle(10000000,3,6)),lwd=2)
plot(density(rtriangle(10000000,3,6)),lwd=2)
grid()
plot(density(rtriangle(10000000,3,6)),lwd=3)
library(AppliedPredictiveModeling)
library(caret)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
library(AppliedPredictiveModeling)
data(concrete)
library(caret)
set.seed(1000)
inTrain = createDataPartition(mixtures$CompressiveStrength, p = 3/4)[[1]]
training = mixtures[ inTrain,]
testing = mixtures[-inTrain,]
par(mfrow=c(1,2))
hist(concrete$Superplasticizer)
hist(log(concrete$Superplasticizer+1))
library(AppliedPredictiveModeling)
library(caret)
set.seed(3433)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
names(training)
idx <- grep("^IL",names(training))
names(training)[idx]
tr <- training[,idx]
PC <- preProcess(tr,method="pca")
sp <- predict(PC,tr)
str(sp)
sd(sp)
apply(sp,2,sd)
sdv <- apply(sp,2,sd)
sdv^2/sum(sdv^2)
sdv^2
sum(sdv^2)
sdv^2/sum(sdv^2)
cumsum(sdv^2/sum(sdv^2))
prc <- princomp(tr,cor = T)
prc$sdev^2/sum(prc$sdev^2)
cumsum(prc$sdev^2/sum(prc$sdev^2))
cumsum(sdv^2/sum(sdv^2))
cumsum(prc$sdev^2/sum(prc$sdev^2))
library(AppliedPredictiveModeling)
set.seed(3433)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
idx <- grep("^IL",names(training))
names(training)[idx]
tr <- training[,idx]
PC <- preProcess(tr,method="pca")
sp <- predict(PC,tr)
sp_test <- predict(PC,testing[,idx])
confusionMatrix(testing$diagnosis,predict(nonPC,testing[,idx]))
nonPC <- train(training$diagnosis ~ .,method = "glm", data=tr)
PCmodel <- train(training$diagnosis ~ .,method = "glm", data=sp[,1:7])
#Confusion matrix
confusionMatrix(testing$diagnosis,predict(nonPC,testing[,idx]))
confusionMatrix(testing$diagnosis,predict(PCmodel,sp_test))
confusionMatrix(testing$diagnosis,predict(nonPC,testing[,idx]))
confusionMatrix(testing$diagnosis,predict(PCmodel,sp_test))
library(c(rCharts,))
library(c(rCharts))
library((rCharts))
library(rCharts)
install.packages("rCharts")
require(devtools)
install_github('rCharts', 'ramnathv')
library(devtools)
install.packages("devtools")
install_github('rCharts', 'ramnathv')
library(devtools)
install_github('rCharts', 'ramnathv')
install.packages(c("plyr", "RCurl"))
install_github('rCharts', 'ramnathv')
library(devtools)
install_github('rCharts', 'ramnathv')
data(airquality)
dTable(airquality, sPaginationType = "full_numbers")
library(rCharts)
dTable(airquality, sPaginationType = "full_numbers")
dTable(airquality, sPaginationType = "full_numbers")
str(airquiality)
str(airquality)
dTable(airquality)
dTable(as.data.frame(airquality))
as.character(airquality)
dTable(as.character(airquality))
dTable((airquality))
dTable()
a <- as.data.frame(airquality)
dTable(a)
dt <- dTable(
iris,
bScrollInfinite = T,
bScrollCollapse = T,
sScrollY = "200px",
width = "500px"
)
ab <- dTable(a)
ab
ab$print("chart")
getwd()
ab$save("chart.html")
setwd("C:\\Users\\Manuel\\Dropbox\\Coursera\\Data Science Specialization\\HW & Projects\\Practical machine learning\\Project")
library(caret)
library(parallel)
library(doParallel)
library(MASS)
train <- read.table("pml_train.csv",stringsAsFactors=T,sep=",",header=T)
validation <- read.csv("pml_test.csv")
names(train)
str(train)
classes <- sapply(train, class)
#Factor variables with high missing data
namesFact <- names(train)[classes=="factor"]
namesFact <- namesFact[!namesFact%in%c("classe")]
#Other variables with high missing data
numNA <- sapply(train,function(x) sum(is.na(x)))
namesMiss <- names(numNA)[numNA>nrow(train)*.8]
#Remove all varibles with high number of missing values
train <- train[,!names(train)%in%c(namesFact,namesMiss,"X")]
validation <- validation[,!names(validation)%in%c(namesFact,namesMiss,"X")]
#Data set without missing values
classes <- sapply(test, class)
table(classes)
sum(complete.cases(train))
#Divide data set
set.seed(123)
testobs <- createDataPartition(train$classe,p = .4,list = F)
test <- train[testobs,]
train <- train[-testobs,]
#========================================================
# Exploratory data analysis
#========================================================
preProcPCA <- preProcess(train[,-56],method = "pca")
trainPCA <- predict(preProcPCA,train[,-56])
testPCA <- predict(preProcPCA,newdata=test[,-56])
validationPCA <- predict(preProcPCA,newdata=validation[,-56])
var <- sapply(trainPCA,var)
expVar <- var*.95/(sum(var))
#========================================================
#Fit control
#========================================================
fitControl <- trainControl(## 10-fold CV
method = "cv",
number = 10,
## repeated ten times
repeats = 1,
allowParallel=F)
system.time(mf_tree <- train(train$classe ~ .,method = "rpart",data=train,
trControl=fitControl) )
system.time(mf_treePCA <- train(train$classe ~ .,method = "rf",data=trainPCA,
trControl=fitControl))
system.time(mf_tree <- train(train$classe ~ .,method = "rpart",data=train,
trControl=fitControl) )
system.time(mf_treePCA <- train(train$classe ~ .,method = "rf",data=trainPCA,
trControl=fitControl))
mf_treePCA <- train(train$classe ~ .,method = "rf",do.trace=T,data=trainPCA,
trControl=fitControl)
mf_treePCA <- train(train$classe ~ .,method = "rf",do.trace=T,ntree = 25,data=trainPCA,
trControl=fitControl)
mf_treePCA
pred_lda <- predict(mf_treePCA,newdata=test)
confusionMatrix(test$classe,pred_lda)
pred_lda <- predict(mf_treePCA,newdata=test)
mf_treePCA
pred_lda <- predict(mf_treePCA,newdata=test)
pred_lda <- predict(mf_treePCA,newdata=testPCA)
confusionMatrix(test$classe,pred_lda)
mf_treePCA <- train(train$classe ~ .,method = "rf",do.trace=T,tuneGrid = cartGrid,data=trainPCA,
mf_rfPCA <- train(train$classe ~ .,method = "rf",do.trace=T,tuneGrid = cartGrid,data=trainPCA,
trControl=fitControl)
mf_rfPCA <- train(train$classe ~ .,method = "rf",do.trace=T,tuneGrid = cartGrid,data=trainPCA,
trControl=fitControl)
cartGrid = expand.grid( .cp = (1:50)*0.01)
mf_rfPCA <- train(train$classe ~ .,method = "rf",do.trace=T,tuneGrid = cartGrid,data=trainPCA,
trControl=fitControl)
expand.grid( .cp = (1:50)*0.01)
mf_rfPCA <- train(train$classe ~ .,method = "rpart",do.trace=T,tuneGrid = cartGrid,data=trainPCA,
trControl=fitControl)
mf_rfPCA <- train(train$classe ~ .,method = "rpart",do.trace=T,tuneGrid = cartGrid,data=trainPCA,
trControl=fitControl)
mf_rfPCA
mf_treePCA
mf_tree <- train(train$classe ~ .,method = "rf",do.trace=T,ntree = 25,data=train,
trControl=fitControl)
mf_tree
mf_qda <- train(train$classe ~ .,method = "qda",data=train,
trControl=fitControl)
mf_qda
table(mf_qda,mf_tree)
table(mf_qda$pred,mf_tree$pred)
table(mf_qda$class)
table(mf_qda$clas)
table(mf_qda$finalModel)
table(mf_qda$finalModel$pred)
table(predict(mf_qda),predict(mf_tree))
mf_treePCA
mr_tree
mf_tree
mf_rf <- train(train$classe ~ .,method = "rf",do.trace=T,ntree = 30,data=train,
trControl=fitControl)
mf_rf
mf_tree
mf_rf$finalModel
sqrt(30)
ncolumn(train)
ncol(train)
sqrt(56)
mf_rf25 <- train(train$classe ~ .,method = "rf",do.trace=T,ntree = 25,mtray=sqrt(ncol(train)),data=train,
trControl=fitControl)
mf_rf25$finalModel
mf_rf30 <- train(train$classe ~ .,method = "rf",do.trace=T,ntree = 30,mtray=sqrt(ncol(train)),data=train,
trControl=fitControl)
mf_rf30
mf_rf30$finalModel
mf_rf25$finalModel
sqrt(ncol(train))
round(sqrt(ncol(train)))
mf_rf2 <- train(train$classe ~ .,method = "rf",do.trace=T,ntree = 2,mtray=round(sqrt(ncol(train))),data=train,
trControl=fitControl)
mf_rf2$finalModel
mtray=round(sqrt(ncol(train)))
round(sqrt(ncol(train)))
ncol(train)
mf_rf2 <- train(train$classe ~ .,method = "rf",do.trace=T,ntree = 2,mtry=round(sqrt(ncol(train))),data=train,
trControl=fitControl)
mf_rf2 <- train(train$classe ~ .,method = "rf",do.trace=T,ntree = 2,mtry=round(sqrt(ncol(train))),data=train,
trControl=fitControl)
mf_rf2 <- train(train$classe ~ .,method = "rf",do.trace=T,ntree = 5,mtry=round(sqrt(ncol(train))),data=train,
trControl=fitControl)
mf_rf25 <- train(train$classe ~ .,method = "rf",do.trace=T,ntree = 25,mtry=sqrt(ncol(train)),data=train,
trControl=fitControl)
mf_rf30
mf_rf25 <- train(train$classe ~ .,method = "rf",do.trace=T,ntree = 25,data=train,
trControl=fitControl)
mf_rf25
mf_rf25$finalModel
mf_rf25
terr <- 0
for(f in folds){
fit <- randomForest(classe ~ .,data=train[-f,],ntree=25,mtry=28)
pred.fit <- predict(fit,newdata=train[f,])
terr <- terr + sum(pred.fit$class==train[f,]$classe)/length(pred.lda$class)
}
folds <- createFolds(train$classe)
terr <- 0
for(f in folds){
fit <- randomForest(classe ~ .,data=train[-f,],ntree=25,mtry=28)
pred.fit <- predict(fit,newdata=train[f,])
terr <- terr + sum(pred.fit$class==train[f,]$classe)/length(pred.lda$class)
}
terr/10
f<-folds[1]
fit <- randomForest(classe ~ .,data=train[-f,],ntree=25,mtry=28)
fit <- randomForest(classe ~ .,data=train[-f,],ntree=25,mtry=28)
f
fit <- randomForest(classe ~ .,data=train[-f,],ntree=25,mtry=28)
fit <- randomForest(classe ~ .,data=train[-f,],ntree=25,mtry=28)
a<-train[-f,]
f
f<-folds[[1]]
fit <- randomForest(classe ~ .,data=train[-f,],ntree=25,mtry=28)
pred.fit <- predict(fit,newdata=train[f,])
terr <- terr + sum(pred.fit$class==train[f,]$classe)/length(pred.lda$class)
pred.fit
terr <- terr + sum(pred.fit==train[f,]$classe)/length(pred.lda$class)
terr <- terr + sum(pred.fit==train[f,]$classe)/length(pred.fit)
for(f in folds){
terr <- 0
for(f in folds){
fit <- randomForest(classe ~ .,data=train[-f,],ntree=25,mtry=28)
pred.fit <- predict(fit,newdata=train[f,])
terr <- terr + sum(pred.fit==train[f,]$classe)/length(pred.fit)
}
terr/10
terr <- 0
fit <- randomForest(classe ~ .,data=train[-f,],ntree=25,mtry=28)
pred.fit <- predict(fit,newdata=train[f,])
terr <- terr + sum(pred.fit==train[f,]$classe)/length(pred.fit)
terr
print(terr)
terr <- 0
for(f in folds){
fit <- randomForest(classe ~ .,data=train[-f,],ntree=25,mtry=28)
pred.fit <- predict(fit,newdata=train[f,])
terr <- terr + sum(pred.fit==train[f,]$classe)/length(pred.fit)
print(terr)
}
terr/10
mt_rf25
mf_rf25
setwd("C:/Users/Manuel/Dropbox/3. DSS/PractMachineLearning")
